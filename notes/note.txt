---GitHub
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

конкатенация - склеивание строк чере оператор +
Интерполяция строк - это способ вставки значений переменных прямо в
g функция возвращает один и тот же результат для одинаковых входных параметров.
Операнд/оператор
Итерация - один проход цикла (повтор)


.strip() - удаление лишних пробелов
'google'.replace('goo', 'maa') - функция замены
round(что, до скольки знаков округлять)
capitalize — писать прописными буквами, закрепить.
swapcase — обменять регистр.
title — заголовок, титул.
lower — нижний.
upper — верхний

--count(<sub>, <start>, <end>) считает количество непересекающихся вхождений
подстроки <sub> в исходную строку s
--startswith(<suffix>, <start>, <end>) определяет начинается ли исходная
строка s подстрокой <suffix> (endswith)
--find(<sub>, <start>, <end>) находит индекс первого вхождения подстроки <sub>
в исходной строке s
--index(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он вызывает ошибку  ValueError: substring not found
во время выполнения программы, если подстрока <sub> не найдена.
--strip() возвращает копию строки s у которой удалены все
пробелы стоящие в начале и конце строки. + lstrip + rstrip
+ Необязательный аргумент <chars>– это строка, которая определяет
набор символов для удаления
--replace(<old>, <new>, максимальное колличество замен) возвращает копию s со всеми вхождениями подстроки <old>,
замененными на <new>.
--isalnum() определяет, состоит ли
исходная строка из буквенно-цифровых символов
--isalpha() определяет, состоит ли исходная строка из буквенных символов
--isdigit() определяет, состоит ли исходная строка только из цифровых символов
--islower() определяет, являются ли все буквенные символы исходной строки строчными
+Все неалфавитные символы игнорируются!
--isupper()
--isspace() состоит ли только из пробелов
--ord из символа в код / --chr из кода в символ по Unicode


--append() добавляет строку 'python' целиком к списку, 
--extend() разбивает строку 'python' на  символы 'p', 'y', 't', 'h', 'o', 'n' и их добавляет в качестве элементов списка. 

--del numbers[5]    # удаляем элемент имеющий индекс 5 (рабоатте со срезами)
--s = ' '.join(words)
--numbers = ip.split('.')
--print(*input(), sep=input()) распаковка строки
---insert() позволяет вставлять значение в список в заданной позиции. В него передается два аргумента:
index: индекс, задающий место вставки значения;
value: значение, которое требуется вставить.

--index() для поиска, возвращает индекс элемента
names = ['Gvido', 'Roman' , 'Timur']
if 'Anders' in names:
    position = names.index('Anders')
    print(position)
else:
    print('Такого значения нет в списке')

--remove() удаляет первый элемент, значение которого равняется переданному в метод значению.

--pop() удаляет элемент по указанному индексу и возвращает его. В метод pop() передается один необязательный аргумент:
index: индекс элемента, который требуется удалить.

--reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный
Существует большая разница между вызовом метода names.reverse() и использованием среза names[::-1]. Метод reverse() меняет порядок элементов на обратный в текущем списке, а срез создает копию списка, в котором элементы следуют в обратном порядке.

--clear() удаляет все элементы из списка.

--split() разбивает строку на слова, используя в качестве разделителя последовательность пробельных символов. (numbers = ip.split('.'))

--join() собирает строку из элементов списка, используя в качестве разделителя строку, к которой применяется метод (s = ' '.join(words))

--bin(), oct(), hex()  --- двоичная, восьмеричная и шестнадцатеричная системы

-- задать модулю псевдоним import marh as m

-- \t - табуляция

Списочное выражение	Результирующий список
[0 for i in range(10)]	            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[i ** 2 for i in range(1, 8)]	    [1, 4, 9, 16, 25, 36, 49]
[i * 10 for i in numbers]	        [10, 140, 50, 90, 120]
[c * 2 for c in word]	            ['HH', 'ee', 'll', 'll', 'oo']
[m[0] for m in words]	            ['o', 't', 't', 'f', 'f', 's']
[i for i in numbers if i < 10]  	[1, 5, 9]
[m[0] for m in words if len(m) == 3]['o', 't', 's']

-------------------------Random
--randint() принимает два обязательных аргумента a и b(включительно) и возвращает случайное целое число из отрезка 
--randrange() принимает такие же аргументы, что и функция range()
--random() возвращает случайное число с плавающей точкой в диапазоне от 0,0 до 1,0(не включительно)
--uniform() тоже возвращает случайное число с плавающей точкой, но при этом она позволяет задавать диапазон для отбора значений.
--seed() установка начальное значение для генератора случайных чисел (random.seed(17))
--shuffle() принимает список в качестве обязательного аргумента и перемешивает его случайным образом.
--choice() принимает список (строку) в качестве обязательного аргумента и возвращает один случайный элемент из переданного списка (строки)
--sample() принимает два обязательных аргумента: список (строку) и количество случайных элементов, а возвращает список случайных элементов в указанном количестве


-------------------Список функций модуля math
Список наиболее часто используемых функций модуля math:

Округления
int()	Округляет число в сторону нуля
round(x)	Округляет число x до ближайшего целого. Если дробная часть числа равна 0.5, то число округляется до ближайшего четного числа
round(x, n)	Округляет число x до n знаков после точки
floor(x)	Округляет число x вниз («пол»)
ceil(x)	Округляет число x вверх («потолок»)
abs(x)	Модуль числа x (абсолютная величина)
Корни, логарифмы, степени и факториал
sqrt(x)	Квадратный корень числа x
pow(x, n)	Возведение числа x в степень n
log(x)	Натуральный логарифм числа x. Основание натурального логарифма равно числу e
log10(x)	Десятичный логарифм числа x. Основание десятичного логарифма равно числу 10
log(x, b)	Логарифм числа x по основанию b
factorial(n)	Факториал натурального числа n
Тригонометрия
degrees(x)	Преобразует угол x, заданный в радианах, в градусы
radians(x)	Преобразует угол x, заданный в градусах, в радианы
cos(x)	Косинус угла x, задаваемого в радианах
sin(x)	Синус угла x, задаваемого в радианах
tan(x)	Тангенс угла x, задаваемого в радианах



--isinstance() для проверки соответствия типа объекта какому-либо типу данных (print(isinstance('Beegeek', str)))
--type(), позволяющая получить тип указанного в качестве аргумента объекта.


------------------!!! Работа с файлами-------------------------------------
r: открывает файл в режиме «только для чтения». Этот режим применяется по умолчанию для функции open. Чтение файла начинается  с начала
rb: открывает файл в режиме «только для чтения» в двоичном формате и начинает чтение с начала файла. Буква b обозначает слово binary(двоичный). Хотя двоичный формат можно использовать для разных целей, обычно он используется при работе с такими вещами, как изображения, видео и т. д.
r+: открывает файл для чтения и записи, помещая указатель в начало файла.
w: открывается в режиме «только для записи». Указатель помещается в начало файла, и это перезапишет любой существующий файл с таким же именем. Он создаст новый файл, если файл с таким именем не существует.
wb: открывает файл в режиме «только для записи» в двоичном режиме.
w+: открывает файл для записи и чтения.
wb+: открывает файл для записи и чтения в двоичном режиме.
a: открывает файл для добавления к нему новой информации. Указатель помещается в конец файла. Новый файл создается, если файл с таким именем не существует.
ab: открывает файл для добавления в двоичном режиме.
a+: открывает файл как для добавления, так и для чтения.
ab+: открывает файл как для добавления, так и для чтения в двоичном режиме.

----------!!!!!!Правила именования переменных
node.hasChildren(); - есть ЛИ что-то?

isEmpty(); - является ли чем-то?

...+count - колличество чего-либо

getName(user); - извлечение чего-то

calculateDiff(first, second) - подсчеты

для переменной циклов зарезервированы буквы i, j, k

Для переменных, хранящих наибольшее и наименьшее значения,
подходят имена largest и smallest соответственно

print(*numbers) - Вывод элементов списка или строк (распаковка)


!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!Интересные решения
!!!!!!!!!!!!!!!!!!!!!!!!

a, b, c = int(input()), int(input()), int(input())
print(('Разносторонний', 'Равнобедренный', '', 'Равносторонний')[(a == b) + (a == c) + (b == c)])

lst = map(float, [input() for _ in range(5)])
print(sum(map(abs, lst)))

while input() not in ("стоп", "хватит", "достаточно"):

for c in input():
    plus += c == '+'

a = [input() for _ in range(n)]
print([c for _ in range(int(input())) for c in input()])

return (28 if month == 2 else 30 if month in [4, 6, 9, 11] else 31)

  print("        %-20s %s°C (high=%s°C, critical=%s°C)" % (
                    entry.label or name, entry.current, entry.high,
                    entry.critical))

    templ = "%-7s %-7s %7s %7s %7s %7s %7s"
    print(templ % ("PID", "User", "USS", "PSS", "Swap", "RSS", "Cmdline"))

for check in check_list:
    try:
        check()

